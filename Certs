pipeline {
    agent any

    environment {
        // Number of days before expiry to raise a warning
        EXPIRY_THRESHOLD = 30

        // List of domains to check (use host:port format)
        DOMAIN_LIST = "google.com:443 yahoo.com:443 yourdomain.com:443"

        // Email address to send the report
        EMAIL_TO = "yourteam@yourcompany.com"
    }

    stages {
        stage('Check OpenSSL Availability') {
            steps {
                script {
                    def opensslAvailable = sh(script: 'which openssl', returnStatus: true) == 0
                    if (!opensslAvailable) {
                        error "‚ùå OpenSSL is not installed on the Jenkins agent. Please install it."
                    } else {
                        echo "‚úÖ OpenSSL is available."
                    }
                }
            }
        }

        stage('Check SSL Certificate Expiry') {
            steps {
                script {
                    def htmlRows = ""
                    def warningCount = 0
                    def currentEpoch = (System.currentTimeMillis() / 1000).toLong()

                    DOMAIN_LIST.split().each { entry ->
                        def (host, port) = entry.split(":")
                        echo "üîç Checking certificate for ${host}:${port}"

                        def certInfo = sh(
                            script: "echo | openssl s_client -servername $host -connect $host:$port 2>/dev/null | openssl x509 -noout -enddate",
                            returnStdout: true
                        ).trim()

                        def match = certInfo =~ /notAfter=(.*)/
                        if (match) {
                            def rawDate = match[0][1].trim()

                            // Convert date to epoch (sandbox-safe)
                            def expiryEpoch = sh(
                                script: "date -d '${rawDate}' +%s",
                                returnStdout: true
                            ).trim().toLong()

                            def daysRemaining = ((expiryEpoch - currentEpoch) / 86400).toInteger()
                            def rowColor = (daysRemaining <= EXPIRY_THRESHOLD.toInteger()) ? "#ffcccc" : "#ccffcc"
                            if (daysRemaining <= EXPIRY_THRESHOLD.toInteger()) {
                                warningCount++
                            }

                            htmlRows += """
                                <tr style="background-color:${rowColor}">
                                  <td>${host}</td>
                                  <td>${port}</td>
                                  <td>${rawDate}</td>
                                  <td>${daysRemaining}</td>
                                </tr>
                            """
                        } else {
                            htmlRows += """
                                <tr style="background-color:#ffcccc">
                                  <td>${host}</td>
                                  <td>${port}</td>
                                  <td colspan="2">‚ùå Failed to fetch certificate</td>
                                </tr>
                            """
                            warningCount++
                        }
                    }

                    // Generate full HTML report
                    def htmlReport = """
                        <html>
                          <body>
                            <h2>üîê SSL Certificate Expiry Report</h2>
                            <table border="1" cellpadding="5" cellspacing="0">
                              <tr style="background-color:#f0f0f0">
                                <th>Host</th>
                                <th>Port</th>
                                <th>Expiry Date</th>
                                <th>Days Left</th>
                              </tr>
                              ${htmlRows}
                            </table>
                          </body>
                        </html>
                    """

                    // Write and archive the report
                    writeFile file: 'cert_expiry_report.html', text: htmlReport
                    archiveArtifacts artifacts: 'cert_expiry_report.html'

                    if (warningCount > 0) {
                        currentBuild.result = 'UNSTABLE'
                    }

                    // Send email with HTML body and attachment
                    emailext(
                        subject: "üîí SSL Certificate Expiry Report ‚Äì ${currentBuild.result}",
                        body: htmlReport,
                        mimeType: 'text/html',
                        to: "${EMAIL_TO}",
                        attachLog: false,
                        attachmentsPattern: 'cert_expiry_report.html'
                    )
                }
            }
        }
    }
}
