pipeline {
    agent any

    environment {
        EXPIRY_THRESHOLD = 30
        CONFLUENCE_URL = "https://yourcompany.atlassian.net/wiki/rest/api/content/12345678?expand=body.storage"
        CONFLUENCE_USER = credentials('confluence-user') // Jenkins credential (username:token)
        EMAIL_TO = "yourteam@yourcompany.com"
        JIRA_SITE = 'your-jira-site' // Define this in Jenkins > Configure System > JIRA Integration
    }

    stages {
        stage('Fetch Domains from Confluence') {
            steps {
                script {
                    def rawJson = sh(
                        script: "curl -s -u ${CONFLUENCE_USER} \"${CONFLUENCE_URL}\"",
                        returnStdout: true
                    ).trim()

                    def domainList = rawJson =~ /([\\w\\.-]+:\\d{2,5})/
                    if (!domainList) {
                        error "‚ùå No domains found in Confluence content"
                    }

                    env.DOMAIN_LIST = domainList.collect { it[1] }.join(" ")
                    echo "‚úÖ Loaded domain list from Confluence: ${env.DOMAIN_LIST}"
                }
            }
        }

        stage('Check OpenSSL Availability') {
            steps {
                script {
                    def opensslAvailable = sh(script: 'which openssl', returnStatus: true) == 0
                    if (!opensslAvailable) {
                        error "‚ùå OpenSSL is not installed on the Jenkins agent."
                    }
                }
            }
        }

        stage('Check SSL Certificate Expiry') {
            steps {
                script {
                    def htmlRows = ""
                    def warningCount = 0
                    def warningHosts = []
                    def currentEpoch = (System.currentTimeMillis() / 1000).toLong()

                    env.DOMAIN_LIST.split().each { entry ->
                        def (host, port) = entry.split(":")
                        echo "üîç Checking certificate for ${host}:${port}"

                        def certInfo = sh(
                            script: "echo | openssl s_client -servername $host -connect $host:$port 2>/dev/null | openssl x509 -noout -enddate",
                            returnStdout: true
                        ).trim()

                        def rawDate = sh(
                            script: "echo '${certInfo}' | grep -oP 'notAfter=\\K.*'",
                            returnStdout: true
                        ).trim()

                        if (rawDate) {
                            def expiryEpoch = sh(script: "date -d '${rawDate}' +%s", returnStdout: true).trim().toLong()
                            def daysRemaining = ((expiryEpoch - currentEpoch) / 86400).toInteger()
                            def rowColor = (daysRemaining <= EXPIRY_THRESHOLD.toInteger()) ? "#ffcccc" : "#ccffcc"
                            if (daysRemaining <= EXPIRY_THRESHOLD.toInteger()) {
                                warningCount++
                                warningHosts << "${host}:${port} - ${rawDate} (${daysRemaining} days left)"
                            }

                            htmlRows += """
                                <tr style="background-color:${rowColor}">
                                  <td>${host}</td>
                                  <td>${port}</td>
                                  <td>${rawDate}</td>
                                  <td>${daysRemaining}</td>
                                </tr>
                            """
                        } else {
                            htmlRows += """
                                <tr style="background-color:#ffcccc">
                                  <td>${host}</td>
                                  <td>${port}</td>
                                  <td colspan="2">‚ùå Failed to fetch certificate</td>
                                </tr>
                            """
                            warningCount++
                            warningHosts << "${host}:${port} - FAILED"
                        }
                    }

                    def htmlReport = """
                        <html>
                          <body>
                            <h2>üîê SSL Certificate Expiry Report</h2>
                            <table border="1" cellpadding="5" cellspacing="0">
                              <tr style="background-color:#f0f0f0">
                                <th>Host</th>
                                <th>Port</th>
                                <th>Expiry Date</th>
                                <th>Days Left</th>
                              </tr>
                              ${htmlRows}
                            </table>
                          </body>
                        </html>
                    """

                    writeFile file: 'cert_expiry_report.html', text: htmlReport
                    archiveArtifacts artifacts: 'cert_expiry_report.html'

                    if (warningCount > 0) {
                        currentBuild.result = 'UNSTABLE'

                        def summary = warningHosts.join("\\n")

                        jiraNewIssue site: env.JIRA_SITE,
                                     projectKey: 'DEVOPS-CERTS',
                                     issueType: 'Task',
                                     summary: "‚ö†Ô∏è SSL Certificate(s) Expiring Soon ‚Äì ${warningCount} host(s)",
                                     description: "The following certificate(s) are expiring soon or could not be verified:\\n\\n${summary}\\n\\nPlease review the attached HTML report.",
                                     filePath: 'cert_expiry_report.html'
                    }

                    emailext(
                        subject: "üîí SSL Certificate Expiry Report ‚Äì ${currentBuild.result}",
                        body: htmlReport,
                        mimeType: 'text/html',
                        to: "${EMAIL_TO}",
                        attachLog: false,
                        attachmentsPattern: 'cert_expiry_report.html'
                    )
                }
            }
        }
    }
}
